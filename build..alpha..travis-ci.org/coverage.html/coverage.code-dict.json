{"/home/travis/build/npmtest/node-npmtest-frontnote/test.js":"/* istanbul instrument in package npmtest_frontnote */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-frontnote/lib.npmtest_frontnote.js":"/* istanbul instrument in package npmtest_frontnote */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_frontnote = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_frontnote = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-frontnote/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-frontnote && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_frontnote */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_frontnote\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_frontnote.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_frontnote.rollup.js'] =\n            local.assetsDict['/assets.npmtest_frontnote.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_frontnote.__dirname + '/lib.npmtest_frontnote.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/index.js":"'use strict';\nmodule.exports = require('./lib/frontnote');","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/frontnote.js":"'use strict';\nconst path = require('path'),\n    extend = require('extend'),\n    Rx = require('rxjs'),\n    glob = require('glob'),\n    ora = require('ora'),\n    chalk = require('chalk'),\n    fs = require('fs-extra');\n\nconst Parser = require('./parser/parser');\nconst Generator = require('./generator/generator');\nconst DEFAULT_OPTIONS = require('./const/options');\n\n/**\n * FrontNote\n * @param target {string|array} 解析するファイルのminimatch形式文字列またはminimatch形式文字列が入った配列\n * @param option {object} オプション\n * @param callback {callback} 全ての処理が正常に終了したときに実行するコールバック関数\n * @constructor\n */\nclass FrontNote {\n    constructor(option) {\n        this.options = extend({},DEFAULT_OPTIONS,option);\n        this.options.out = path.resolve(this.options.out);\n        this.Parser = new Parser();\n    }\n\n    /**\n     * render styleguide\n     * @param target{String|Array}\n     * @returns {Observable<T>}\n     */\n    render(target) {\n        const spinner = ora('Loading files...').start();\n        let list = typeof target === 'string' ? glob.sync(target) : target.reduce((previous,current) => {\n            return previous.concat(glob.sync(current));\n        },[]);\n        let obs = this.readFiles(list).map((files) => {\n            spinner.text = 'Parsing files...';\n            return this.parseFiles(files);\n        }).flatMap((parsedFiles) => {\n            spinner.text = 'Generating StyleGuide...';\n            return this.createStyleGuide(parsedFiles);\n        }).share();\n        obs.take(1).subscribe((result) => {\n            if (this.options.verbose) {\n                result.forEach((filepath) => {\n                    console.log(chalk.green(`[w] ${filepath}`));\n                });\n            }\n            spinner.text = 'Generated StyleGuide';\n            spinner.succeed();\n        });\n        return obs;\n    }\n    readFiles(fileList) {\n        const observers = fileList.map((filepath) => {\n            const readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n            return readFileAsObservable(filepath, 'utf8').map((data) => {\n                return {\n                    file: filepath,\n                    content: data\n                };\n            });\n        });\n        if (observers.length === 0) {\n            return Rx.Observable.create(observer => {\n                observer.next([]);\n            });\n        }\n        return Rx.Observable.combineLatest(observers);\n    }\n    parseFiles(files) {\n        return files.map((fileData) => {\n            const value = this.Parser.parse(fileData.file,fileData.content);\n            if (value) {\n                return value;\n            }\n        }).filter((v) => {\n            return (v !== undefined);\n        });\n    }\n    /**\n     * スタイルガイド作成\n     * @param data\n     */\n    createStyleGuide(data) {\n        return Rx.Observable.create(observer => {\n            const gen = new Generator(data,this.options);\n            gen.generate().subscribe(result => {\n                let cwd = process.cwd();\n                result = Array.prototype.concat.apply([],result).filter((v) => {\n                    return (v);\n                }).map((v) => {\n                    return path.relative(cwd,v);\n                });\n                observer.next(result);\n            },(e) => {\n                observer.error(e);\n            });\n        });\n    }\n}\n\n// プラグイン関数をエクスポート\nmodule.exports = FrontNote;","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/parser/parser.js":"'use strict';\nconst path = require('path'),\n    sanitizer = require('sanitizer');\n\nconst PATTERNS = require('../const/pattern.js');\n\nclass Parser {\n    parse(file, content) {\n        let overview = content.match(PATTERNS.overview);\n        if (overview) {\n            overview = this.parseComments(overview);\n            if (overview) {\n                overview = overview[0];\n            }\n        }\n        let colors = content.match(PATTERNS.colors);\n        if (colors) {\n            colors = this.parseColors(colors);\n        }\n        let comments = content.match(PATTERNS.comment);\n        if (comments) {\n            comments = this.parseComments(comments);\n        }\n        if (overview || comments || colors) {\n            let fileName = path.basename(file, path.extname(file));\n            let relPath = path.relative(__dirname, path.dirname(file));\n            if (relPath) {\n                relPath = relPath.replace(/\\.\\.\\//g, '').replace(/\\.\\.\\\\/g, '').replace(/\\//g, '-').replace(/\\\\/g, '-') + '-';\n            }\n            return {\n                file: path.relative(process.cwd(),file),\n                fileName: fileName,\n                url: relPath + fileName + '.html',\n                dirs: file.split(path.sep),\n                ext: path.extname(file),\n                sections: comments,\n                overview: overview,\n                colors: colors\n            };\n        }\n        return null;\n    }\n\n    /**\n     * コメントの塊をパースする\n     * @param comments\n     * @returns {Array}\n     */\n    parseComments(comments) {\n        let result = [];\n        for (let i = 0, len = comments.length; i < len; i++) {\n            let com = this.parseComment(comments[i]);\n            if (com) {\n                result.push(com);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * カラーコメントの塊をパースする\n     * @param colors\n     * @returns {Array}\n     */\n    parseColors(colors) {\n        let result = [];\n        for (let i = 0, len = colors.length; i < len; i++) {\n            let color = this.parseColor(colors[i]);\n            if (color) {\n                result = result.concat(color);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * カラーコメントパースする\n     * @param color\n     * @returns {Array}\n     */\n    parseColor(color) {\n        let colors = this.filterPattern(color, PATTERNS.attr, false),\n            result = [];\n        for (let i = 0, len = colors.length; i < len; i++) {\n            let matches = colors[i].match(PATTERNS.color);\n            if (matches.length > 2) {\n                result.push({\n                    value: matches[0],\n                    name: matches[1],\n                    color: matches[2]\n                });\n            }\n        }\n        return result;\n    }\n\n    /**\n     * コメントをパースする\n     * @param comment\n     * @returns {{title: Array, comment: Array, attributes: (*|Array), markdown: *, html: *, code: *}}\n     */\n    parseComment(comment) {\n        comment = comment.replace(PATTERNS.prefix, '');\n\n        // 属性\n        let attrs = this.filterPattern(comment, PATTERNS.attr, false);\n        comment = comment.replace(PATTERNS.attr, '');\n\n        // サンプルコード領域\n        let code = this.filterPattern(comment, PATTERNS.code);\n        comment = comment.replace(PATTERNS.code, '');\n\n        return this.sanitize(attrs, code, comment);\n    }\n\n    /**\n     * パースされた文字列をサニタイズする\n     * @param attrs\n     * @param code\n     * @param comment\n     * @returns {{title: Array, comment: Array, attributes: (*|Array), code: *}}\n     */\n    sanitize(attrs, code, comment) {\n        let result = {\n            title: [],\n            comment: [],\n            attributes: attrs || [],\n            code: code\n        };\n\n        let lines = comment.split(PATTERNS.splitter),\n            hasTitle = false,\n            i = 0,\n            len = 0;\n\n        for (i = 0, len = lines.length; i < len; i++) {\n            let line = lines[i];\n            if (!hasTitle) {\n                if (line) {\n                    result.title.push(sanitizer.escape(line));\n                } else if (result.title.length !== 0) {\n                    hasTitle = true;\n                }\n            } else if (line) {\n                result.comment.push(sanitizer.escape(line));\n            }\n        }\n        result.title = result.title.join('<br>');\n        result.comment = result.comment.join('<br>');\n\n        for (i = 0, len = result.attributes.length; i < len; i++) {\n            result.attributes[i] = sanitizer.escape(result.attributes[i].replace(PATTERNS.attrPrefix, ''));\n        }\n        return result;\n    }\n\n    /**\n     * 正規表現によって一致した文字列データを返却\n     * @param str\n     * @param pattern\n     * @param trim\n     * @returns {*}\n     */\n    filterPattern(str, pattern, trim) {\n        if (trim === false) {\n            return str.match(pattern);\n        } else {\n            let match = str.match(pattern);\n            if (match) {\n                return match[0].replace(PATTERNS.codeWrapper, '');\n            }\n            return null;\n        }\n    }\n}\nmodule.exports = Parser;","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/const/pattern.js":"module.exports = {\n    comment: /\\/\\*+\\s*#styleguide([^*]|\\*[^/])*\\*+\\//g,\n    overview: /\\/\\*+\\s*#overview([^*]|\\*[^/])*\\*+\\//g,\n    colors: /\\/\\*+\\s*#colors([^*]|\\*[^/])*\\*+\\//g,\n    color: /@(.+)\\s+(.+)$/,\n    splitter: /\\n|\\r/,\n    prefix: /(^\\/\\*+\\s*\\n*(#styleguide|#overview)?)|(\\n*\\s*\\*+\\/$)/gm,\n    line: /^\\s*$/gm,\n    attr: /^\\s*\\t*@.+$/gm,\n    attrPrefix: /^\\s*\\t*@/,\n    code: /```(.|\\s)+```/g,\n    codeWrapper: /(```)\\n?/g\n};","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/generator/generator.js":"'use strict';\nconst Rx = require('rxjs');\nconst fs = require('fs-extra');\nconst cpx = require('cpx');\nconst path = require('path');\nconst md = require(\"marked\");\nconst Render = require('../render/render');\nconst helpers = require('../helper/template-helper');\nclass Generator {\n    constructor(data, options) {\n        this.data = data;\n        this.options = options;\n        this.Render = new Render();\n    }\n\n    generate() {\n        return this.cleanOutputDir()\n            .flatMap(() => {\n                return this.readFile(this.options.template);\n            }).flatMap((tmpl) => {\n                return Rx.Observable.combineLatest(\n                    this.writeOverview(tmpl),\n                    this.writePages(tmpl),\n                    this.copyOtherFiles()\n                );\n            });\n    }\n\n    cleanOutputDir() {\n        return Rx.Observable.create(observer => {\n            if (!this.options.clean) return observer.next();\n            fs.remove(this.options.out, () => {\n                observer.next();\n            });\n        });\n    }\n\n    readFile(filepath) {\n        const readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n        return readFileAsObservable(filepath, 'utf8');\n    }\n    writeFile(filepath,content) {\n        const writeFileAsObservable = Rx.Observable.bindNodeCallback(fs.outputFile);\n        return writeFileAsObservable(filepath, content).map(() => {\n            return filepath;\n        });\n    }\n    copyFile(from,to) {\n        const copyFileAsObservable = Rx.Observable.bindNodeCallback(cpx.copy);\n        return copyFileAsObservable(from, to).map(() => {\n            return to;\n        });\n    }\n\n    writeOverview(tmpl) {\n        //styleguide.mdを読み込み\n        return this.readFile(this.options.overview)\n            .flatMap((file) => {\n                const outputPath = this.options.out + '/index.html';\n                const rendered = this.Render.render(tmpl, {\n                    title: this.options.title,\n                    current: md.parse(file),\n                    files: this.data,\n                    overview: true,\n                    helpers: helpers,\n                    css: this.Render.generateIncludeCss(this.options.css),\n                    script: this.Render.generateIncludeScript(this.options.script),\n                    params: this.options.params || {}\n                });\n                return this.writeFile(outputPath, rendered);\n            });\n    }\n\n    writePages(tmpl) {\n        let observers = this.data.map((section) => {\n            const outputPath = this.options.out + '/' + section.url;\n            const rendered = this.Render.render(tmpl, {\n                title: this.options.title,\n                current: section,\n                files: this.data,\n                overview: false,\n                helpers: helpers,\n                css: this.Render.generateIncludeCss(this.options.css),\n                script: this.Render.generateIncludeScript(this.options.script),\n                params: this.options.params || {}\n            });\n            return this.writeFile(outputPath, rendered);\n        });\n        if (observers.length === 0) {\n            return Rx.Observable.create(observer => {\n                observer.next();\n            });\n        }\n        return Rx.Observable.combineLatest(observers);\n    }\n\n    copyOtherFiles() {\n        if (!this.options.includeAssetPath) {\n            return Rx.Observable.create(observer => {\n                observer.next([]);\n            });\n        }\n        let assets = typeof this.options.includeAssetPath === 'string' ? [this.options.includeAssetPath] : this.options.includeAssetPath;\n\n        assets = assets.map((asset) => {\n            return this.copyFile(asset,path.join(this.options.out,'assets'));\n        });\n        return Rx.Observable.combineLatest(assets);\n    }\n}\nmodule.exports = Generator;","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/render/render.js":"'use strict';\n\nconst TemplateHelper = require('../helper/template-helper');\nconst ejs = require('ejs');\n\nconst CSS = '<link rel=\"stylesheet\" href=\"<%=src%>\" />';\nconst SCRIPT = '<script src=\"<%=src%>\"></script>';\n\nclass Render {\n    render(template, params) {\n        //EJSを使ってテンプレートレンダリング\n        params.helpers = TemplateHelper;\n        return ejs.render(template, params);\n    }\n\n    /**\n     * HTMLに追加読み込みするファイルパスまたはパスが入った配列からタグを生成\n     * @param type(css|script)\n     * @param arr\n     * @return {string|array}\n     */\n    generateInclude(type, data) {\n        if (!data) return '';\n        let template = SCRIPT;\n        if (type === 'css') {\n            template = CSS;\n        }\n        if (typeof data === 'string') {\n            return ejs.render(template, {src: data});\n        }\n        let result = data.map((d) => {\n            return ejs.render(template, {src: d});\n        });\n        return result.join('\\n');\n    }\n\n    /**\n     * HTMLに追加読み込みするCSSファイルパスまたはパスが入った配列からタグを生成\n     * @param arr\n     * @return {string|array}\n     */\n    generateIncludeCss(arr) {\n        return this.generateInclude('css', arr);\n    }\n\n    /**\n     * HTMLに追加読み込みするJSファイルパスまたはパスが入った配列からタグを生成\n     * @param arr {string|array}\n     */\n    generateIncludeScript(arr) {\n        return this.generateInclude('script', arr);\n    }\n}\nmodule.exports = Render;","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/helper/template-helper.js":"'use strict';\nconst HELPER = {\n    // currentファイルかどうか\n    isCurrent(current,file) {\n        return (current.file === file.file);\n    },\n    // 指定した属性が含まれているかどうか\n    hasAttribute(attributes,attr) {\n        return (attributes.indexOf(attr) !== -1);\n    }\n};\nmodule.exports = HELPER;","/home/travis/build/npmtest/node-npmtest-frontnote/node_modules/frontnote/lib/const/options.js":"module.exports = {\n    overview: __dirname + '/../../styleguide.md',\n    template: __dirname + '/../../template/index.ejs',\n    includeAssetPath: __dirname + '/../../template/assets/**/*',\n    css: './style.css',\n    script: null,\n    out: './guide',\n    title: 'StyleGuide',\n    verbose: false,\n    clean: false,\n    params: {}\n};"}